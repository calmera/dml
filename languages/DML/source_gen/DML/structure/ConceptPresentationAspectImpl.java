package DML.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractSection;
  private ConceptPresentation props_BooleanPrimitiveType;
  private ConceptPresentation props_Cardinality;
  private ConceptPresentation props_CommentLine;
  private ConceptPresentation props_ComplexType;
  private ConceptPresentation props_ComplexTypeBody;
  private ConceptPresentation props_DatePrimitiveType;
  private ConceptPresentation props_EmptyLine;
  private ConceptPresentation props_EnumPrimitiveType;
  private ConceptPresentation props_EnumValue;
  private ConceptPresentation props_Field;
  private ConceptPresentation props_Model;
  private ConceptPresentation props_NumericPrimitiveType;
  private ConceptPresentation props_PrimitiveType;
  private ConceptPresentation props_SectionList;
  private ConceptPresentation props_TextPrimitiveType;
  private ConceptPresentation props_Type;
  private ConceptPresentation props_Unit;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractSection:
        if (props_AbstractSection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractSection = cpb.create();
        }
        return props_AbstractSection;
      case LanguageConceptSwitch.BooleanPrimitiveType:
        if (props_BooleanPrimitiveType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_BooleanPrimitiveType = cpb.create();
        }
        return props_BooleanPrimitiveType;
      case LanguageConceptSwitch.Cardinality:
        if (props_Cardinality == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Cardinality");
          props_Cardinality = cpb.create();
        }
        return props_Cardinality;
      case LanguageConceptSwitch.CommentLine:
        if (props_CommentLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("#");
          props_CommentLine = cpb.create();
        }
        return props_CommentLine;
      case LanguageConceptSwitch.ComplexType:
        if (props_ComplexType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ComplexType = cpb.create();
        }
        return props_ComplexType;
      case LanguageConceptSwitch.ComplexTypeBody:
        if (props_ComplexTypeBody == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ComplexTypeBody");
          props_ComplexTypeBody = cpb.create();
        }
        return props_ComplexTypeBody;
      case LanguageConceptSwitch.DatePrimitiveType:
        if (props_DatePrimitiveType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DatePrimitiveType = cpb.create();
        }
        return props_DatePrimitiveType;
      case LanguageConceptSwitch.EmptyLine:
        if (props_EmptyLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<empty>");
          props_EmptyLine = cpb.create();
        }
        return props_EmptyLine;
      case LanguageConceptSwitch.EnumPrimitiveType:
        if (props_EnumPrimitiveType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EnumPrimitiveType = cpb.create();
        }
        return props_EnumPrimitiveType;
      case LanguageConceptSwitch.EnumValue:
        if (props_EnumValue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EnumValue = cpb.create();
        }
        return props_EnumValue;
      case LanguageConceptSwitch.Field:
        if (props_Field == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Field = cpb.create();
        }
        return props_Field;
      case LanguageConceptSwitch.Model:
        if (props_Model == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Model = cpb.create();
        }
        return props_Model;
      case LanguageConceptSwitch.NumericPrimitiveType:
        if (props_NumericPrimitiveType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_NumericPrimitiveType = cpb.create();
        }
        return props_NumericPrimitiveType;
      case LanguageConceptSwitch.PrimitiveType:
        if (props_PrimitiveType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PrimitiveType = cpb.create();
        }
        return props_PrimitiveType;
      case LanguageConceptSwitch.SectionList:
        if (props_SectionList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SectionList");
          props_SectionList = cpb.create();
        }
        return props_SectionList;
      case LanguageConceptSwitch.TextPrimitiveType:
        if (props_TextPrimitiveType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TextPrimitiveType = cpb.create();
        }
        return props_TextPrimitiveType;
      case LanguageConceptSwitch.Type:
        if (props_Type == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Type = cpb.create();
        }
        return props_Type;
      case LanguageConceptSwitch.Unit:
        if (props_Unit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Unit = cpb.create();
        }
        return props_Unit;
    }
    return null;
  }
}
