package DML.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintFunction;
import jetbrains.mps.smodel.runtime.ConstraintContext_CanBeChild;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Type_Constraints extends BaseConstraintsDescriptor {
  public Type_Constraints() {
    super(CONCEPTS.Type$hj);
  }

  @Override
  protected ConstraintFunction<ConstraintContext_CanBeChild, Boolean> calculateCanBeChildConstraint() {
    return new ConstraintFunction<ConstraintContext_CanBeChild, Boolean>() {
      @NotNull
      public Boolean invoke(@NotNull ConstraintContext_CanBeChild context, @Nullable CheckingNodeContext checkingNodeContext) {
        boolean result = staticCanBeAChild(context.getNode(), context.getParentNode(), context.getConcept(), context.getLink());

        if (!(result) && checkingNodeContext != null) {
          checkingNodeContext.setBreakingNode(canBeChildBreakingPoint);
        }

        return result;
      }
    };
  }
  private static boolean staticCanBeAChild(SNode node, SNode parentNode, SAbstractConcept childConcept, SContainmentLink link) {
    return SNodeOperations.isInstanceOf(parentNode, CONCEPTS.SectionList$IK);
  }
  private static final SNodePointer canBeChildBreakingPoint = new SNodePointer("r:89c9ba6c-f1be-424a-82ba-31be77863d5d(DML.constraints)", "2441404070892402479");

  private static final class CONCEPTS {
    /*package*/ static final SConcept Type$hj = MetaAdapterFactory.getConcept(0x432aa8f9d91b4617L, 0x8bf766a97fe245baL, 0x71b6a2d94406d628L, "DML.structure.Type");
    /*package*/ static final SConcept SectionList$IK = MetaAdapterFactory.getConcept(0x432aa8f9d91b4617L, 0x8bf766a97fe245baL, 0x21e19c113eaf270cL, "DML.structure.SectionList");
  }
}
